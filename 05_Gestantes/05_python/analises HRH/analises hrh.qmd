---
title: "Needs-based health workforce planning for pregnancy care in Brazil"
format: html
editor: visual
---

```{r}
#| warning: false
#| echo: false

library(tidyverse)
library(readxl)
library(geojsonio)
library(broom)
library(jsonlite)
library(RODBC)

```

# Calculating Demand

## Target Population

At first we will access SINASC projections data. These projections were calculated by two co-authors. Multilayer Perceptron (MLP) algorithm registered the best results among other machine learning and statistics technics.  

We will deduce the population covered by health insurance.   

```{r}
#| warning: false 

#reading and selecting variables
predictions <- read_excel("~/GitHub/dimensionamento/05_Gestantes/05_python/previsoes_go.xlsx") |>   
               select(codibge, data, qtd) |> 
               mutate(qtd = round(qtd))

health_insurance <- read_csv("~/GitHub/dimensionamento/05_Gestantes/05_python/beneficiarios_plano_saude.csv") |>  
         filter(mes == "06") |>  
         mutate(perc_sus = (100 - percentual_pop_coberta)/100) |>  
         select(cod_regsaud, perc_sus) 

predictions <- 
  predictions |>  
  left_join(health_insurance, by = c("codibge"="cod_regsaud")) |>  
  mutate(qtd_sus = round(qtd * perc_sus)) |> 
  mutate(data = as.character(data))

DT::datatable(predictions)

```

## Total services 

We will now quantify the number and variety of services need to assist pregnant women and the newborn in the primary health care (PHC) setting. 

```{r include=FALSE}
#| echo: false
#| warning: false

servicos <- vroom::vroom("servicos.csv") |> select(-`...1`)

```

```{r}
#| eval: false
for(i in 1:nrow(previsoes_go)){
  row <- previsoes_go[i,]
  url = paste("http://200.137.215.27:5025/calcula_procedimentos?mes_ano=", 
              substring(row$data, 1, 7), 
              "&nascidos_vivos=", 
              round(row$qtd_sus, 0), sep = '')
  temp <- fromJSON(url)
  servicos <- rbind(temp, servicos) 
  print(paste("Chamando:",url))
}

```

## PHC Services and professionals

Vamos selecionar apenas os serviços realizados na APS. Em sequência, vamos selecionar apenas aqueles que são executados por médicos ou enfermeiros. Para isso vamos utilizar como referência nossa tabela que relaciona procedimentos e profissionais. 

```{r}

servicos <- servicos |> 
                filter(nivel_atencao == "APS")

```



## Lendo os dados de **demanda** e filtrando apenas observações necessárias

```{r}
#| warning: false

cegonha_go <- read_csv("df_prof_go.csv") %>% 
                  filter(nivel_atencao == 'APS') %>% 
                  select(regiao, mês_procedimento_realizado, CBO,
                         horas_categoria, fte40) %>% 
                    mutate(prof = case_when(substr(CBO, 1, 4) == "2235" ~ "Enfermeiro",
                                            substr(CBO, 1, 4) == "2251" ~ "Médico",
                                            TRUE ~ "Outros")) %>% 
                    filter(prof != "Outros") 

demanda <- cegonha_go %>% 
  group_by(regiao, mês_procedimento_realizado,
           prof) %>% 
  summarise(fte40_demanda = sum(fte40)) %>% 
  mutate(regiao = as.character(regiao)) %>% 
  filter(mês_procedimento_realizado > "2021-01-01")

```

```{r}
#| echo: false
#| warning: false

oferta_GO <- vroom::vroom("oferta_go.csv") |> select(-`...1`)

```



## Lendo os dados de **oferta** 

```{r}
#| warning: false
#| eval: false

dremio_host <- Sys.getenv("endereco")
dremio_port <- Sys.getenv("port")
dremio_uid <- Sys.getenv("uid")
dremio_pwd <- Sys.getenv("datalake")

channel <- odbcDriverConnect(sprintf("DRIVER=Dremio Connector;HOST=%s;PORT=%s;UID=%s;PWD=%s;AUTHENTICATIONTYPE=Basic Authentication;CONNECTIONTYPE=Direct", dremio_host, dremio_port, dremio_uid, dremio_pwd))

consulta <- 'SELECT * FROM "Analytics Layer".Infraestrutura.Profissionais."Profissionais APS"'

oferta_GO <- sqlQuery(channel, consulta, 
                     as.is = TRUE)


```
```{r}

producao_SISAB <- read_excel("producao_SISAB.xls") %>% 
                      select(Cod_Regiao_Saude, Porcentagem)

producao_SISAB$Cod_Regiao_Saude = as.character(producao_SISAB$Cod_Regiao_Saude)
```

## Tratando os dados de oferta 

```{r}

oferta <- oferta_GO %>% 
  mutate(cod_regsaud = as.character(cod_regsaud)) |> 
  mutate(ano_mes = ym(COMPETEN)) %>% 
  mutate(horas = HORAOUTR + HORAHOSP + HORA_AMB) %>% 
  mutate(prof = if_else(substr(CBO, 1, 4) == "2235", "Enfermeiro", "Médico")) %>% 
  group_by(uf, cod_regsaud, regiao_saude, prof, ano_mes) %>% 
  summarise(horas = sum(horas)) %>% 
  left_join(producao_SISAB, by = c("cod_regsaud"="Cod_Regiao_Saude")) %>% 
  mutate(fte40 = horas/126) %>% 
  mutate(direto = (fte40) * 0.75) %>% 
  mutate(liquido = direto * Porcentagem) %>% 
  mutate(ano_mes_corrigido = ano_mes + years(2)) %>% 
  select(-ano_mes) 

```

# Comparando demanda e oferta 

```{r}

demanda_oferta <- 
  demanda %>%  
  left_join(oferta, by = c("regiao"="cod_regsaud",
                           "prof"="prof",
                           "mês_procedimento_realizado"="ano_mes_corrigido")) %>% 
  filter(uf != "NA") %>% 
  mutate(ano = year(mês_procedimento_realizado)) %>% 
  mutate(resultado = liquido - fte40_demanda) %>% 
  group_by(regiao, ano, prof,
           uf, regiao_saude) %>% 
  summarise(resultado = sum(resultado),
            demanda = sum(fte40_demanda),
            oferta = sum(liquido)) %>% 
  filter(ano == '2024') %>% 
  mutate(perc = (oferta * 100)/demanda) %>% 
  mutate(id = as.integer(regiao)) %>% 
  ungroup() %>% 
  select(id, prof, resultado, perc)


```

# criando um mapa para 


```{r}

spdf <- geojson_read("shape file regioes saude.json",  what = "sp")

```


```{r}

spdf_region <- spdf[ spdf@data$est_id == "52" , ]


spdf_fortified <- sf::st_as_sf(spdf_region)

spdf_fortified %>%
  left_join(demanda_oferta, by = c("reg_id"="id")) %>%
  ggplot() +
  geom_sf(aes(fill = perc)) +
  theme_minimal() +
  scale_fill_gradient(low = "#F8766D", high = "#00BA38") +
  facet_wrap(~prof, nrow = 1) +
  theme(
    axis.line = element_blank(),
    axis.text.x = element_blank(),
    axis.text.y = element_blank(),
    axis.ticks = element_blank(),
    axis.title.x = element_blank(),
    axis.title.y = element_blank()
  )

```

